x/xg 0x7fffffffe140
x_c
x_d
set $rdi = 'z'
set 0x6362610061616161 = 'z'
set 0x6362610061616161 = 'z'
mem 0x6362610061616161
mem 0x6362610061616161
set var ad=0x6362610061616161
set var test=0x6362610061616161
set test=0x6362610061616161
set variable t=1
set variable $t=0x6362610061616161
mem $t
l
p &0x6362610061616161
p 0x6362610061616161
set *((int *)0x6362610061616161) = 127
set *((int *)0x7fffffffe140) = 127
p 0x7fffffffe140
p 0x7fffffffe140
p 0x7fffffffe140
x /x 0x7fffffffe140:
x /x 0x7fffffffe140
set *((int *)0x7fffffffe140) = 42
x /x 0x7fffffffe140
p 0x7fffffffe140
p (char *)0x7fffffffe140
p (int *)0x7fffffffe140
p *(int *)0x7fffffffe140
p *(char *)0x7fffffffe140
p *(double *)0x7fffffffe140
p *(long *)0x7fffffffe140
p /x *(long *)0x7fffffffe140
p /x *(char *)0x7fffffffe140
p /x *(int *)0x7fffffffe140
p /x *(double *)0x7fffffffe140
p /x *(double *)0x7fffffffe140
p /x *(double *)0x7fffffffe140
p /x *(char *)0x7fffffffe140
/x *(char *)0x7fffffffe140
/x *(float*)0x7fffffffe140
/x *(double *)0x7fffffffe140
/x *(long *)0x7fffffffe140
p /x *(long *)0x7fffffffe140
p /x *(double *)0x7fffffffe140
p /x *(unsigned int *)0x7fffffffe140
p /x *( int *)0x7fffffffe140
p /x 0x7fffffffe140
p /x *0x7fffffffe140
p /xg *0x7fffffffe140
p /x *(void *)0x7fffffffe140
p /x (void *)0x7fffffffe140
p /x *(double *)0x7fffffffe140
 *)0x7fffffffe140
i r
x_x
x_g
x_b
p /x *(double *)0x7fffffffe140
p /x *(int32b *)0x7fffffffe140
p /x *(int32 *)0x7fffffffe140
p /x *(bool *)0x7fffffffe140
p /x *(long double *)0x7fffffffe140
p /x *(long long double *)0x7fffffffe140
p /x *(long long float *)0x7fffffffe140
p /x *(long long*)0x7fffffffe140
xcmd_iterative 
clean
run
c
n
n
clean
r
n
c
n
n
clean
r
n
n
c
n
clean
r
n
clean
d
b ft_check_base_validity 
run
c
n
i r
run
n
p 0x7fffffffe137
p *(char *)0x7fffffffe137
p *(char *)0x7fffffffe137 -1
p *(char *)0x7fffffffe136

p *(char *)$rsp
p *(char *)$rsp+1
p *(char *)$rsp-1
p *(char *)($rsp-1)
p *(char *)($rsp-8)
p *(char *)($rsp-16)
p *(char *)($rsp+16)
p *(char *)($rsp+8)
clean
d
b ft_atoi_base_utils.s:20
run
myFun_stop
n
run
n
p *(char *)0x7fffffffe140:
p *(char *)0x7fffffffe140
n
x_c
i source
x_c
source .gdbinit
x_c
n
myFun_stop
stop
stop
n
run
clean
r
d
b ft_atoi_base_utils.s:20
c
n
run
n
clean
d
b ft_atoi_base_utils.s:20
run
n
set $rsp =0
i r
n
clean
run
d
clean
d
b ft_atoi_base_utils.s:20
run
n
stop
run
$rsp = $rsp - 1
set $rsp = $rsp - 1
stop
set $rsp = $rsp +1
set $rsp = $rsp +8
clean
stop
run
d
b ft_atoi_base_utils.s:20
c
n
p /s $rip
p $rip
p /c $rip
n
c
run
n
p /s $rdi
p /c $rdi
c /s $rdi
x /s $rdi
x /s $rsi
clean
run
d
b ft_atoi_base_utils.s:20
d
b ft_atoi_base_utils.s:20
run
n
x/s $rdi
x/s $rsi
clean
d
b ft_atoi_base_utils.s:20
run
n
clean
d
b ft_atoi_base_utils.s:20
r
n
x /s $rdi
x /s $rsi
set $rsi = 0x7fffffffe140
n
x /s $rdi
x /s $rsi
clean
d
b ft_atoi_base_utils.s:24
run
n
clean 
d
b ft_atoi_base_utils.s:24
r
n
x /s $rdi
x /s $rsi
x /s $rdi + 8
x /s $rdi - 8
x /s $rdi
x /s $rdi + 1
x /s $rdi + 1
x /s $rdi -2
x /s $rdi -3
_d
x_d
p *(char *)$rdi
p *(char *)$rsi
p *(char *)$rsi - 2
p *(char *)$rsi
p *(char **)$rsi
p *(char)$rsi
p *(char *)$rsi
clean
d
b ft_atoi_base_utils.s:24
run
n
d
b ft_atoi_basebase_utils.s:18
l
run
n
kill
clean
d
b ft_atoi_base_utils.s:15
run
n
stop
n
run
n
